import mongoose from 'mongoose';
import { Appointment } from '../models/Appointment';
import { User } from '../models/User';
import { Mechanic } from '../models/Mechanic';
import { CustomError } from '../utils/response';
import { Vehicle } from '../models/Vehicle';

export interface CreateAppointmentData {
  userId: string;
  mechanicId: string;
  serviceType: string;
  appointmentDate: Date;
  timeSlot: string;
  description: string;
  vehicleId?: string;
}

export interface UpdateAppointmentData {
  status: 'confirmed' | 'rejected' | 'in-progress' | 'completed' | 'cancelled';
  rejectionReason?: string;
  mechanicNotes?: string;
}

export class AppointmentService {
  /**
   * Yeni randevu olu≈ütur
   */
  static async createAppointment(data: CreateAppointmentData) {
    try {
      console.log('üîç AppointmentService: createAppointment called with data:', JSON.stringify(data, null, 2));
      
      // Ustanƒ±n m√ºsait olup olmadƒ±ƒüƒ±nƒ± kontrol et
      const mechanic = await Mechanic.findById(data.mechanicId);
      console.log('üîç AppointmentService: Mechanic found:', mechanic ? 'Yes' : 'No');
      if (!mechanic) {
        throw new CustomError('Usta bulunamadƒ±', 404);
      }

      if (!mechanic.isAvailable) {
        throw new CustomError('Usta ≈üu anda m√ºsait deƒüil', 400);
      }

      // appointmentDate'i Date objesine √ßevir
      const appointmentDateObj = new Date(data.appointmentDate);
      
      // Aynƒ± tarih ve saatte √ßakƒ±≈üan randevu var mƒ± kontrol et
      const conflictingAppointment = await Appointment.findOne({
        mechanicId: data.mechanicId,
        appointmentDate: {
          $gte: new Date(appointmentDateObj.getFullYear(), appointmentDateObj.getMonth(), appointmentDateObj.getDate()),
          $lt: new Date(appointmentDateObj.getFullYear(), appointmentDateObj.getMonth(), appointmentDateObj.getDate() + 1)
        },
        timeSlot: data.timeSlot,
        status: { $in: ['pending', 'confirmed', 'in-progress'] }
      });

      if (conflictingAppointment) {
        throw new CustomError('Bu tarih ve saatte usta m√ºsait deƒüil', 400);
      }

      // Eƒüer vehicleId g√∂nderilmemi≈üse, kullanƒ±cƒ±nƒ±n son kayƒ±tlƒ± aracƒ±nƒ± ata
      let resolvedVehicleId: mongoose.Types.ObjectId;
      if (!data.vehicleId) {
        const lastVehicle = await Vehicle.findOne({ userId: data.userId }).sort({ updatedAt: -1, createdAt: -1 });
        if (!lastVehicle) {
          throw new CustomError('Kullanƒ±cƒ±nƒ±n kayƒ±tlƒ± aracƒ± bulunamadƒ±. L√ºtfen √∂nce ara√ß ekleyin.', 400);
        }
        resolvedVehicleId = new mongoose.Types.ObjectId((lastVehicle as any)._id.toString());
      } else {
        resolvedVehicleId = new mongoose.Types.ObjectId(data.vehicleId);
      }

      // Randevu olu≈ütur
      const appointment = new Appointment({
        userId: new mongoose.Types.ObjectId(data.userId),
        mechanicId: new mongoose.Types.ObjectId(data.mechanicId),
        serviceType: data.serviceType,
        appointmentDate: appointmentDateObj,
        timeSlot: data.timeSlot,
        description: data.description || '',
        vehicleId: resolvedVehicleId,
        status: 'pending',
        createdAt: new Date()
      });

      await appointment.save();
      return appointment;
    } catch (error) {
      console.error('Randevu olu≈üturma hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Kullanƒ±cƒ±nƒ±n randevularƒ±nƒ± getir (≈û√∂f√∂r/M√º≈üteri i√ßin)
   */
  static async getAppointmentsByUserId(userId: string) {
    try {
      if (!userId || userId.trim() === '') {
        return [];
      }
      
      if (!mongoose.Types.ObjectId.isValid(userId)) {
        return [];
      }
      
      const appointments = await Appointment.find({ userId })
        .populate('mechanicId', 'name surname rating experience city shopName shopType')
        .populate('vehicleId', 'brand modelName year plateNumber fuelType engineType transmission package color mileage lastMaintenanceDate nextMaintenanceDate')
        .sort({ appointmentDate: -1 });

      // Debug: Fiyat bilgilerini kontrol et
      appointments.forEach((apt, index) => {
        if (apt.status === 'completed' && apt.paymentStatus === 'pending') {
          console.log(`üîç AppointmentService: √ñdeme bekleyen appointment ${index + 1}:`, {
            id: apt._id,
            price: apt.price,
            priceType: typeof apt.price,
            hasPrice: apt.price && apt.price > 0
          });
        }
      });

      return appointments;
    } catch (error) {
      console.error('‚ùå AppointmentService: Kullanƒ±cƒ± randevularƒ± getirme hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Ustanƒ±n randevularƒ±nƒ± getir (Usta/D√ºkkan i√ßin)
   */
  static async getMechanicAppointments(mechanicId: string, statusFilter?: string) {
    try {
      const appointments = await Appointment.find({
        mechanicId: mechanicId,
        ...(statusFilter && { status: statusFilter })
      })
      .populate({
        path: 'userId',
        select: 'name surname email phone',
        options: { lean: true }
      })
      .populate('vehicleId')
      .sort({ appointmentDate: -1 });

      // Randevularƒ± frontend formatƒ±na √ßevir
      const formattedAppointments = appointments.map(obj => {
        if (!obj.userId) {
          console.warn('‚ö†Ô∏è AppointmentService: userId populate failed for appointment:', obj._id, '- User document not found or deleted');
          return null;
        }

        // Vehicle bilgilerini formatla
        let vehicle = null;
        if (obj.vehicleId) {
          vehicle = {
            _id: obj.vehicleId._id,
            brand: (obj.vehicleId as any).brand || 'Bilinmiyor',
            modelName: (obj.vehicleId as any).modelName || 'Bilinmiyor',
            year: (obj.vehicleId as any).year || 'Bilinmiyor',
            plateNumber: (obj.vehicleId as any).plateNumber || 'Bilinmiyor',
            fuelType: (obj.vehicleId as any).fuelType || 'Bilinmiyor',
            engineType: (obj.vehicleId as any).engineType || 'Bilinmiyor',
            transmission: (obj.vehicleId as any).transmission || 'Bilinmiyor',
            package: (obj.vehicleId as any).package || 'Bilinmiyor',
            color: (obj.vehicleId as any).color || undefined,
            mileage: (obj.vehicleId as any).mileage || undefined,
            lastMaintenanceDate: (obj.vehicleId as any).lastMaintenanceDate || undefined,
            nextMaintenanceDate: (obj.vehicleId as any).nextMaintenanceDate || undefined
          };
        } else {
          vehicle = {
            brand: 'Ara√ß bilgisi yok',
            modelName: '',
            plateNumber: 'Belirtilmemi≈ü'
          };
        }

        return {
          ...obj.toObject(),
          customer: {
            _id: obj.userId._id,
            name: (obj.userId as any).name || 'Bilinmiyor',
            surname: (obj.userId as any).surname || 'Bilinmiyor',
            email: (obj.userId as any).email || 'Bilinmiyor',
            phone: (obj.userId as any).phone || 'Bilinmiyor'
          },
          vehicle: vehicle
        };
      }).filter(Boolean);

      return formattedAppointments;
    } catch (error) {
      console.error('getMechanicAppointments error:', error);
      throw error;
    }
  }

  /**
   * Randevu detayƒ±nƒ± getir
   */
  static async getAppointmentById(appointmentId: string, userId: string) {
    try {
      console.log('üîç AppointmentService: getAppointmentById called with:', appointmentId);
      
      const appointment = await Appointment.findById(appointmentId)
        .populate('userId', 'name surname phone email')
        .populate('mechanicId', 'name surname phone email rating experience city shopType')
        .populate('vehicleId', 'brand modelName year plateNumber fuelType engineType transmission package color mileage lastMaintenanceDate nextMaintenanceDate')

      if (!appointment) {
        throw new CustomError('Randevu bulunamadƒ±', 404);
      }
      
      // Kullanƒ±cƒ±nƒ±n bu randevuyu g√∂rme yetkisi var mƒ± kontrol et
      const appointmentUserId = appointment.userId._id ? appointment.userId._id.toString() : appointment.userId.toString();
      const appointmentMechanicId = appointment.mechanicId._id ? appointment.mechanicId._id.toString() : appointment.mechanicId.toString();
      
      if (appointmentUserId !== userId && appointmentMechanicId !== userId) {
        throw new CustomError('Bu randevuyu g√∂rme yetkiniz yok', 403);
      }

      // Frontend formatƒ±na √ßevir
      const obj = appointment.toObject();
      
      // customer field'ƒ±nƒ± ekle (userId'den)
      if (obj.userId) {
        (obj as any).customer = {
          _id: (obj.userId as any)._id,
          name: (obj.userId as any).name,
          surname: (obj.userId as any).surname,
          email: (obj.userId as any).email,
          phone: (obj.userId as any).phone
        };
        delete (obj as any).userId;
      }
      
      // vehicle field'ƒ±nƒ± ekle (vehicleId'den)
      if (obj.vehicleId) {
        (obj as any).vehicle = {
          _id: (obj.vehicleId as any)._id,
          brand: (obj.vehicleId as any).brand,
          modelName: (obj.vehicleId as any).modelName,
          year: (obj.vehicleId as any).year,
          plateNumber: (obj.vehicleId as any).plateNumber,
          fuelType: (obj.vehicleId as any).fuelType,
          engineType: (obj.vehicleId as any).engineType,
          transmission: (obj.vehicleId as any).transmission,
          package: (obj.vehicleId as any).package,
          color: (obj.vehicleId as any).color,
          mileage: (obj.vehicleId as any).mileage,
          lastMaintenanceDate: (obj.vehicleId as any).lastMaintenanceDate,
          nextMaintenanceDate: (obj.vehicleId as any).nextMaintenanceDate
        };
        delete (obj as any).vehicleId;
      }
      
      // Reddedilen randevularda hassas bilgileri gizle
      if (obj.status === 'rejected') {
        if ((obj as any).customer) {
          delete (obj as any).customer.phone;
          delete (obj as any).customer.email;
        }
        (obj as any).vehicle = undefined;
      }

      return obj;
    } catch (error) {
      console.error('Randevu detayƒ± getirme hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Randevu durumunu g√ºncelle (onay/red/i≈ülem)
   */
  static async updateAppointmentStatus(
    appointmentId: string,
    status: string,
    rejectionReason?: string,
    mechanicNotes?: string
  ) {
    try {
      console.log('üîß AppointmentService: updateAppointmentStatus called with:', {
        appointmentId,
        status,
        rejectionReason,
        mechanicNotes
      });

      const appointment = await Appointment.findById(appointmentId);
      if (!appointment) {
        throw new CustomError('Randevu bulunamadƒ±', 404);
      }

      // Status ge√ßi≈ülerini kontrol et
      const validTransitions: { [key: string]: string[] } = {
        'pending': ['confirmed', 'rejected', 'cancelled'],
        'confirmed': ['in-progress', 'completed', 'cancelled'], // completed eklendi
        'in-progress': ['completed', 'cancelled'],
        'completed': ['cancelled'], // completed'dan ba≈üka duruma ge√ßilemez
        'rejected': [], // rejected'dan ba≈üka duruma ge√ßilemez
        'cancelled': [] // cancelled'dan ba≈üka duruma ge√ßilemez
      };

      const currentStatus = appointment.status;
      
      // Eƒüer aynƒ± status'e ge√ßilmeye √ßalƒ±≈üƒ±lƒ±yorsa, hata verme, sadece g√ºncelle
      if (currentStatus === status) {
        console.log(`‚ö†Ô∏è AppointmentService: Aynƒ± status'e ge√ßi≈ü yapƒ±lƒ±yor: ${currentStatus} ‚Üí ${status}`);
        
        // Sadece rejectionReason veya mechanicNotes g√ºncelleniyorsa
        if (rejectionReason || mechanicNotes) {
          if (rejectionReason) appointment.rejectionReason = rejectionReason;
          if (mechanicNotes) appointment.mechanicNotes = mechanicNotes;
          appointment.updatedAt = new Date();
          await appointment.save();
          return appointment;
        }
        
        // Hi√ßbir deƒüi≈üiklik yoksa mevcut appointment'ƒ± d√∂nd√ºr
        return appointment;
      }
      
      const allowedTransitions = validTransitions[currentStatus] || [];

      if (!allowedTransitions.includes(status)) {
        throw new CustomError(`Ge√ßersiz status ge√ßi≈üi: ${currentStatus} ‚Üí ${status}`, 400);
      }

      // Durum g√ºncellemesi
      appointment.status = status as any;
      
      if (status === 'rejected' && rejectionReason) {
        appointment.rejectionReason = rejectionReason;
      }

      if (mechanicNotes) {
        appointment.mechanicNotes = mechanicNotes;
      }

      await appointment.save();
      console.log('üîß AppointmentService: Appointment status updated successfully to:', appointment.status);
      return appointment;
    } catch (error) {
      console.error('Randevu durumu g√ºncelleme hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Randevuyu tamamla (i≈ü bitir)
   */
  static async completeAppointment(appointmentId: string, completionNotes: string, price: number, estimatedDuration?: number) {
    try {
      console.log('üîß AppointmentService: completeAppointment called with:', {
        appointmentId,
        completionNotes,
        price,
        estimatedDuration
      });

      const appointment = await Appointment.findById(appointmentId);
      if (!appointment) {
        throw new CustomError('Randevu bulunamadƒ±', 404);
      }

      // Sadece confirmed veya in-progress durumundaki randevular tamamlanabilir
      if (appointment.status !== 'confirmed' && appointment.status !== 'in-progress') {
        throw new CustomError('Sadece onaylanmƒ±≈ü veya devam eden i≈üler tamamlanabilir', 400);
      }

      // Randevuyu tamamla
      console.log('üîß AppointmentService: Fiyat kaydediliyor:', price, 'Type:', typeof price);
      console.log('üîß AppointmentService: Appointment √∂ncesi price:', appointment.price);
      
      appointment.status = 'completed';
      appointment.mechanicNotes = completionNotes;
      appointment.price = price;
      appointment.paymentStatus = 'pending'; // √ñdeme bekleniyor
      
      console.log('üîß AppointmentService: Appointment sonrasƒ± price:', appointment.price);
      
      // Usta tahmini s√ºreyi belirler
      if (estimatedDuration && estimatedDuration > 0) {
        appointment.estimatedDuration = estimatedDuration;
      }
      
      appointment.actualDuration = appointment.estimatedDuration || 0;
      appointment.completionDate = new Date();

      console.log('üîß AppointmentService: Appointment kaydedilmeden √∂nce price:', appointment.price);
      await appointment.save();
      console.log('üîß AppointmentService: Appointment kaydedildikten sonra price:', appointment.price);
      console.log('üîß AppointmentService: Appointment completed successfully with price:', appointment.price);
      return appointment;
    } catch (error) {
      console.error('Randevu tamamlama hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * √ñdeme durumunu g√ºncelle
   */
  static async updatePaymentStatus(appointmentId: string, paymentData: any, userId: string) {
    try {
      const appointment = await Appointment.findOneAndUpdate(
        { _id: appointmentId, userId: new mongoose.Types.ObjectId(userId) },
        { 
          paymentStatus: paymentData.paymentStatus,
          paymentDate: paymentData.paymentDate || new Date(),
          updatedAt: new Date()
        },
        { new: true }
      );

      if (!appointment) {
        throw new CustomError('Randevu bulunamadƒ±', 404);
      }

      return appointment;
    } catch (error) {
      console.error('√ñdeme durumu g√ºncelleme hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Randevuyu iptal et
   */
  static async cancelAppointment(appointmentId: string, userId: string) {
    try {
      const appointment = await Appointment.findOneAndUpdate(
        { _id: appointmentId, userId: new mongoose.Types.ObjectId(userId) },
        { status: 'cancelled', updatedAt: new Date() },
        { new: true }
      );

      if (!appointment) {
        throw new CustomError('Randevu bulunamadƒ± veya iptal edilemez', 404);
      }

      return appointment;
    } catch (error) {
      console.error('Randevu iptal etme hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Bildirim ayarlarƒ±nƒ± g√ºncelle
   */
  static async updateNotificationSettings(appointmentId: string, settings: any, userId: string) {
    try {
      const appointment = await Appointment.findOneAndUpdate(
        { _id: appointmentId, userId: new mongoose.Types.ObjectId(userId) },
        { 
          notificationSettings: settings,
          updatedAt: new Date()
        },
        { new: true }
      );

      if (!appointment) {
        throw new CustomError('Randevu bulunamadƒ±', 404);
      }

      return appointment;
    } catch (error) {
      console.error('Bildirim ayarlarƒ± g√ºncelleme hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * ƒ∞leti≈üim bilgilerini payla≈ü
   */
  static async shareContactInfo(appointmentId: string, userId: string) {
    try {
      const appointment = await Appointment.findById(appointmentId)
        .populate('userId', 'name surname phone email')
        .populate('mechanicId', 'name surname phone email');

      if (!appointment) {
        throw new CustomError('Randevu bulunamadƒ±', 404);
      }

      // Sadece onaylanmƒ±≈ü randevularda ileti≈üim bilgileri payla≈üƒ±labilir
      if (appointment.status !== 'confirmed' && appointment.status !== 'in-progress') {
        throw new CustomError('Randevu hen√ºz onaylanmamƒ±≈ü', 400);
      }

      // Kullanƒ±cƒ±nƒ±n bu randevuyu g√∂rme yetkisi var mƒ± kontrol et
      const appointmentUserId = appointment.userId._id ? appointment.userId._id.toString() : appointment.userId.toString();
      const appointmentMechanicId = appointment.mechanicId._id ? appointment.mechanicId._id.toString() : appointment.mechanicId.toString();
      
      if (appointmentUserId !== userId && appointmentMechanicId !== userId) {
        throw new CustomError('Bu randevuyu g√∂rme yetkiniz yok', 403);
      }

      // ƒ∞leti≈üim bilgilerini hazƒ±rla
      const contactInfo = {
        driver: {
          name: (appointment.userId as any).name + ' ' + (appointment.userId as any).surname,
          phone: (appointment.userId as any).phone,
          email: (appointment.userId as any).email
        },
        mechanic: {
          name: (appointment.mechanicId as any).name + ' ' + (appointment.mechanicId as any).surname,
          phone: (appointment.mechanicId as any).phone,
          email: (appointment.mechanicId as any).email
        }
      };

      return contactInfo;
    } catch (error) {
      console.error('ƒ∞leti≈üim bilgileri payla≈üma hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Randevu istatistiklerini getir
   */
  static async getAppointmentStats(mechanicId: string) {
    try {
      const today = new Date();
      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);

      // Aktif i≈üler (pending + confirmed + in-progress)
      const activeJobs = await Appointment.countDocuments({
        mechanicId,
        status: { $in: ['pending', 'confirmed', 'in-progress'] }
      });

      // Bug√ºnk√º kazan√ß (tamamlanan i≈üler)
      const todayCompletedAppointments = await Appointment.find({
        mechanicId,
        status: 'completed',
        updatedAt: { $gte: startOfDay, $lt: endOfDay }
      });

      const todayEarnings = todayCompletedAppointments.reduce((total, app) => total + (app.price || 0), 0);

      // Ger√ßek rating bilgisini getir
      const { AppointmentRating } = await import('../models/AppointmentRating');
      const ratings = await AppointmentRating.find({ mechanicId });
      
      let averageRating = 0;
      if (ratings.length > 0) {
        const totalRating = ratings.reduce((sum, r) => sum + r.rating, 0);
        averageRating = totalRating / ratings.length;
      }

      return {
        activeJobs,
        todayEarnings,
        rating: Math.round(averageRating * 10) / 10
      };
    } catch (error) {
      console.error('ƒ∞statistik getirme hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Bug√ºnk√º randevularƒ± getir
   */
  static async getTodaysAppointments(userId: string) {
    try {
      const today = new Date();
      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);

      const appointments = await Appointment.find({
        userId: new mongoose.Types.ObjectId(userId),
        appointmentDate: { $gte: startOfDay, $lt: endOfDay },
        status: { $in: ['confirmed', 'in-progress'] }
      })
        .populate('mechanicId', 'name surname rating experience city shopName shopType')
        .populate('vehicleId', 'brand modelName year plateNumber')
        .sort({ appointmentDate: 1 });

      return appointments;
    } catch (error) {
      console.error('Bug√ºnk√º randevularƒ± getirme hatasƒ±:', error);
      return [];
    }
  }

  /**
   * Randevu ara
   */
  static async searchAppointments(query: string, userId: string) {
    try {
      const appointments = await Appointment.find({
        userId: new mongoose.Types.ObjectId(userId),
        $or: [
          { serviceType: { $regex: query, $options: 'i' } },
          { description: { $regex: query, $options: 'i' } }
        ]
      })
        .populate('mechanicId', 'name surname rating experience city shopName shopType')
        .populate('vehicleId', 'brand modelName year plateNumber')
        .sort({ appointmentDate: -1 });

      return appointments;
    } catch (error) {
      console.error('Randevu arama hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Tarih aralƒ±ƒüƒ±nda randevularƒ± getir
   */
  static async getAppointmentsByDateRange(startDate: string, endDate: string, userId: string) {
    try {
      const start = new Date(startDate);
      const end = new Date(endDate);

      const appointments = await Appointment.find({
        userId: new mongoose.Types.ObjectId(userId),
        appointmentDate: { $gte: start, $lte: end }
      })
        .populate('mechanicId', 'name surname rating experience city shopName shopType')
        .populate('vehicleId', 'brand modelName year plateNumber')
        .sort({ appointmentDate: -1 });

      return appointments;
    } catch (error) {
      console.error('Tarih aralƒ±ƒüƒ±nda randevu getirme hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Mekaniƒüin m√ºsaitlik durumunu getir
   */
  static async getMechanicAvailability(date: string, mechanicId: string) {
    try {
      const targetDate = new Date(date);
      const startOfDay = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate());
      const endOfDay = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate() + 1);

      const appointments = await Appointment.find({
        mechanicId: new mongoose.Types.ObjectId(mechanicId),
        appointmentDate: { $gte: startOfDay, $lt: endOfDay },
        status: { $in: ['pending', 'confirmed', 'in-progress'] }
      })
        .sort({ appointmentDate: 1 });

      return appointments;
    } catch (error) {
      console.error('M√ºsaitlik durumu getirme hatasƒ±:', error);
      return [];
    }
  }

  /**
   * T√ºm randevularƒ± getir (debug i√ßin)
   */
  static async getAllAppointments() {
    try {
      const appointments = await Appointment.find({})
        .populate('userId', 'name surname')
        .populate('mechanicId', 'name surname shopName shopType')
        .populate('vehicleId', 'brand modelName plateNumber')
        .sort({ createdAt: -1 });

      return appointments;
    } catch (error) {
      console.error('T√ºm randevularƒ± getirme hatasƒ±:', error);
      return [];
    }
  }
}
