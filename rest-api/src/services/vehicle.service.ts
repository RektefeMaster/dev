import { Vehicle, IVehicle } from '../models/Vehicle';
import { User } from '../models/User';
import { Appointment } from '../models/Appointment';
import mongoose from 'mongoose';
import { CustomError } from '../middleware/errorHandler';

export class VehicleService {
  /**
   * Yeni araÃ§ oluÅŸtur
   */
  static async createVehicle(vehicleData: Partial<IVehicle>, userId: string): Promise<IVehicle> {
    try {
      // ObjectId validation
      if (!mongoose.Types.ObjectId.isValid(userId)) {
        throw new CustomError('GeÃ§ersiz kullanÄ±cÄ± ID', 400);
      }

      // KullanÄ±cÄ±nÄ±n var olduÄŸunu kontrol et
      const user = await User.findById(userId);
      if (!user) {
        throw new CustomError('KullanÄ±cÄ± bulunamadÄ±', 404);
      }

      // AraÃ§ verilerini hazÄ±rla
      const vehicle = new Vehicle({
        ...vehicleData,
        userId: new mongoose.Types.ObjectId(userId)
      });

      const savedVehicle = await vehicle.save();
      return savedVehicle;
    } catch (error) {
      if (error instanceof CustomError) throw error;
      throw new CustomError('AraÃ§ oluÅŸturulurken hata oluÅŸtu', 500);
    }
  }

  /**
   * KullanÄ±cÄ±nÄ±n araÃ§larÄ±nÄ± getir
   */
  static async getUserVehicles(userId: string): Promise<any[]> {
    try {
      // ObjectId validation
      if (!mongoose.Types.ObjectId.isValid(userId)) {
        throw new CustomError('GeÃ§ersiz kullanÄ±cÄ± ID', 400);
      }

      const vehicles = await Vehicle.find({ userId: new mongoose.Types.ObjectId(userId) })
        .populate('userId', 'name surname email')
        .sort({ createdAt: -1 })
        .lean(); // ðŸš€ OPTIMIZE: Memory optimization
      
      return vehicles;
    } catch (error) {
      throw new CustomError('AraÃ§lar getirilirken hata oluÅŸtu', 500);
    }
  }

  /**
   * Belirli bir aracÄ± getir
   */
  static async getVehicleById(vehicleId: string, userId: string): Promise<IVehicle> {
    try {
      // ObjectId validation
      if (!mongoose.Types.ObjectId.isValid(vehicleId)) {
        throw new CustomError('GeÃ§ersiz araÃ§ ID', 400);
      }
      if (!mongoose.Types.ObjectId.isValid(userId)) {
        throw new CustomError('GeÃ§ersiz kullanÄ±cÄ± ID', 400);
      }

      const vehicle = await Vehicle.findOne({
        _id: new mongoose.Types.ObjectId(vehicleId),
        userId: new mongoose.Types.ObjectId(userId)
      }).populate('userId', 'name surname email');

      if (!vehicle) {
        throw new CustomError('AraÃ§ bulunamadÄ±', 404);
      }

      return vehicle;
    } catch (error) {
      if (error instanceof CustomError) throw error;
      throw new CustomError('AraÃ§ getirilirken hata oluÅŸtu', 500);
    }
  }

  /**
   * AracÄ± gÃ¼ncelle
   */
  static async updateVehicle(vehicleId: string, userId: string, updateData: Partial<IVehicle>): Promise<IVehicle> {
    try {
      const vehicle = await Vehicle.findOneAndUpdate(
        {
          _id: new mongoose.Types.ObjectId(vehicleId),
          userId: new mongoose.Types.ObjectId(userId)
        },
        updateData,
        { new: true, runValidators: true }
      ).populate('userId', 'name surname email');

      if (!vehicle) {
        throw new CustomError('AraÃ§ bulunamadÄ±', 404);
      }

      return vehicle;
    } catch (error) {
      if (error instanceof CustomError) throw error;
      throw new CustomError('AraÃ§ gÃ¼ncellenirken hata oluÅŸtu', 500);
    }
  }

  /**
   * AracÄ± sil
   */
  static async deleteVehicle(vehicleId: string, userId: string): Promise<void> {
    try {
      const vehicle = await Vehicle.findOneAndDelete({
        _id: new mongoose.Types.ObjectId(vehicleId),
        userId: new mongoose.Types.ObjectId(userId)
      });

      if (!vehicle) {
        throw new CustomError('AraÃ§ bulunamadÄ±', 404);
      }
    } catch (error) {
      if (error instanceof CustomError) throw error;
      throw new CustomError('AraÃ§ silinirken hata oluÅŸtu', 500);
    }
  }

  /**
   * TÃ¼m araÃ§larÄ± getir (admin iÃ§in)
   */
  static async getAllVehicles(): Promise<IVehicle[]> {
    try {
      const vehicles = await Vehicle.find()
        .populate('userId', 'name surname email')
        .sort({ createdAt: -1 });
      
      return vehicles;
    } catch (error) {
      throw new CustomError('AraÃ§lar getirilirken hata oluÅŸtu', 500);
    }
  }

  /**
   * AraÃ§ arama
   */
  static async searchVehicles(searchTerm: string, userId?: string): Promise<IVehicle[]> {
    try {
      const searchQuery: any = {
        $or: [
          { brand: { $regex: searchTerm, $options: 'i' } },
          { model: { $regex: searchTerm, $options: 'i' } },
          { plateNumber: { $regex: searchTerm, $options: 'i' } }
        ]
      };

      if (userId) {
        searchQuery.userId = new mongoose.Types.ObjectId(userId);
      }

      const vehicles = await Vehicle.find(searchQuery)
        .populate('userId', 'name surname email')
        .sort({ createdAt: -1 });

      return vehicles;
    } catch (error) {
      throw new CustomError('AraÃ§ arama yapÄ±lÄ±rken hata oluÅŸtu', 500);
    }
  }

  /**
   * Servis edilmiÅŸ araÃ§larÄ± getir
   */
  static async getServicedVehicles(mechanicId: string): Promise<IVehicle[]> {
    try {
      // ObjectId validation
      if (!mongoose.Types.ObjectId.isValid(mechanicId)) {
        throw new CustomError('GeÃ§ersiz mekanik ID', 400);
      }

      // Appointment'larda servis edilmiÅŸ araÃ§larÄ± bul
      const servicedAppointments = await Appointment.find({
        mechanicId: new mongoose.Types.ObjectId(mechanicId),
        status: 'TAMAMLANDI'
      }).populate('vehicleId');

      // AraÃ§ ID'lerini Ã§Ä±kar
      const vehicleIds = servicedAppointments
        .map(appointment => appointment.vehicleId)
        .filter(vehicle => vehicle !== null);

      // AraÃ§larÄ± getir
      const vehicles = await Vehicle.find({
        _id: { $in: vehicleIds }
      }).populate('userId', 'name surname email phone');

      return vehicles;
    } catch (error) {
      throw new CustomError('Servis edilmiÅŸ araÃ§lar getirilirken hata oluÅŸtu', 500);
    }
  }

  /**
   * AracÄ± favorile/favoriden Ã§Ä±kar
   */
  static async toggleFavorite(vehicleId: string, userId: string): Promise<IVehicle> {
    try {
      // ObjectId validation
      if (!mongoose.Types.ObjectId.isValid(vehicleId)) {
        throw new CustomError('GeÃ§ersiz araÃ§ ID', 400);
      }
      if (!mongoose.Types.ObjectId.isValid(userId)) {
        throw new CustomError('GeÃ§ersiz kullanÄ±cÄ± ID', 400);
      }

      // AracÄ± bul
      const vehicle = await Vehicle.findOne({
        _id: new mongoose.Types.ObjectId(vehicleId),
        userId: new mongoose.Types.ObjectId(userId)
      });

      if (!vehicle) {
        throw new CustomError('AraÃ§ bulunamadÄ±', 404);
      }

      // KullanÄ±cÄ±nÄ±n diÄŸer araÃ§larÄ±nÄ± favoriden Ã§Ä±kar (sadece bir araÃ§ favori olabilir)
      await Vehicle.updateMany(
        { 
          userId: new mongoose.Types.ObjectId(userId),
          _id: { $ne: new mongoose.Types.ObjectId(vehicleId) }
        },
        { isFavorite: false }
      );

      // Bu aracÄ±n favori durumunu toggle et
      vehicle.isFavorite = !vehicle.isFavorite;
      await vehicle.save();

      // User modelindeki favoriteVehicle field'Ä±nÄ± gÃ¼ncelle
      if (vehicle.isFavorite) {
        // AracÄ± favori yap
        await User.findByIdAndUpdate(
          new mongoose.Types.ObjectId(userId),
          { favoriteVehicle: new mongoose.Types.ObjectId(vehicleId) }
        );
      } else {
        // AracÄ± favoriden Ã§Ä±kar
        await User.findByIdAndUpdate(
          new mongoose.Types.ObjectId(userId),
          { $unset: { favoriteVehicle: 1 } }
        );
      }

      return vehicle;
    } catch (error) {
      if (error instanceof CustomError) throw error;
      throw new CustomError('Favori durumu gÃ¼ncellenirken hata oluÅŸtu', 500);
    }
  }
}
